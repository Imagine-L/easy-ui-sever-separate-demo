{"ast":null,"code":"import { login, logout } from \"@/api/user\";\nimport storage from \"@/utils/storage\";\nimport { actions, mutations, session } from \"@/constant\";\nimport { stat } from \"@babel/core/lib/gensync-utils/fs\";\nconst user = {\n  state: {\n    userName: '',\n    nickName: '',\n    token: ''\n  },\n  getters: {\n    isLogin(state) {\n      return state.userName !== '' && state.token !== '';\n    }\n\n  },\n  mutations: {\n    [mutations.SAVE_USER_NAME](state, userName) {\n      state.userName = userName;\n    },\n\n    [mutations.SAVE_NICK_NAME](state, nickName) {\n      state.nickName = nickName;\n    },\n\n    [mutations.SAVE_TOKEN](state, token) {\n      state.token = token;\n    },\n\n    [mutations.EMPTY](state) {\n      storage.remove(session.SESSION_USER_TAG);\n      state.userName = '';\n      state.nickName = '';\n      state.token = '';\n    }\n\n  },\n  actions: {\n    [actions.LOGIN]({\n      commit\n    }, user) {\n      return new Promise((resolve, reject) => {\n        login(user).then(resp => {\n          storage.saveSessionObject(session.SESSION_USER_TAG, resp.data);\n          commit(mutations.SAVE_USER_NAME, resp.data.user.userName);\n          commit(mutations.SAVE_NICK_NAME, resp.data.user.nickName);\n          commit(mutations.SAVE_TOKEN, resp.data.token);\n          resolve(resp);\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    },\n\n    [actions.LOGOUT]({\n      commit\n    }) {\n      return new Promise((resolve, reject) => {\n        logout().then(resp => {\n          storage.remove(session.SESSION_USER_TAG);\n          commit(mutations.SAVE_USER_NAME, '');\n          commit(mutations.SAVE_NICK_NAME, '');\n          commit(mutations.SAVE_TOKEN, '');\n          resolve(resp);\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    },\n\n    [actions.RESTORE]({\n      commit\n    }) {\n      let loginUser = storage.getSessionObject(session.SESSION_USER_TAG);\n\n      if (loginUser !== null && loginUser !== '') {\n        console.log(loginUser);\n        commit(mutations.SAVE_USER_NAME, loginUser.user.userName);\n        commit(mutations.SAVE_NICK_NAME, loginUser.user.nickName);\n        commit(mutations.SAVE_TOKEN, loginUser.token);\n      }\n    }\n\n  }\n};\nexport default user;","map":{"version":3,"sources":["E:/学习/项目/元动力ssm小项目/website-ui/src/store/modules/user.js"],"names":["login","logout","storage","actions","mutations","session","stat","user","state","userName","nickName","token","getters","isLogin","SAVE_USER_NAME","SAVE_NICK_NAME","SAVE_TOKEN","EMPTY","remove","SESSION_USER_TAG","LOGIN","commit","Promise","resolve","reject","then","resp","saveSessionObject","data","catch","error","LOGOUT","RESTORE","loginUser","getSessionObject","console","log"],"mappings":"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","sourcesContent":["import {login, logout} from \"@/api/user\"\r\nimport storage from \"@/utils/storage\";\r\nimport {actions, mutations, session} from \"@/constant\";\r\nimport {stat} from \"@babel/core/lib/gensync-utils/fs\";\r\n\r\nconst user = {\r\n    state: {\r\n        userName: '',\r\n        nickName: '',\r\n        token: ''\r\n    },\r\n    getters: {\r\n        isLogin(state) {\r\n            return state.userName !== '' && state.token !== ''\r\n        }\r\n    },\r\n    mutations: {\r\n        [mutations.SAVE_USER_NAME](state, userName) {\r\n            state.userName = userName\r\n        },\r\n        [mutations.SAVE_NICK_NAME](state, nickName) {\r\n            state.nickName = nickName\r\n        },\r\n        [mutations.SAVE_TOKEN](state, token) {\r\n            state.token = token\r\n        },\r\n        [mutations.EMPTY](state) {\r\n            storage.remove(session.SESSION_USER_TAG)\r\n            state.userName = ''\r\n            state.nickName = ''\r\n            state.token = ''\r\n        }\r\n    },\r\n    actions: {\r\n        [actions.LOGIN]({commit}, user) {\r\n            return new Promise((resolve, reject) => {\r\n                login(user).then(resp => {\r\n                    storage.saveSessionObject(session.SESSION_USER_TAG, resp.data)\r\n                    commit(mutations.SAVE_USER_NAME, resp.data.user.userName)\r\n                    commit(mutations.SAVE_NICK_NAME, resp.data.user.nickName)\r\n                    commit(mutations.SAVE_TOKEN, resp.data.token)\r\n                    resolve(resp)\r\n                }).catch(error => {\r\n                    reject(error)\r\n                })\r\n            })\r\n        },\r\n        [actions.LOGOUT]({commit}) {\r\n            return new Promise((resolve, reject) => {\r\n                logout().then(resp => {\r\n                    storage.remove(session.SESSION_USER_TAG)\r\n                    commit(mutations.SAVE_USER_NAME, '')\r\n                    commit(mutations.SAVE_NICK_NAME, '')\r\n                    commit(mutations.SAVE_TOKEN, '')\r\n                    resolve(resp)\r\n                }).catch(error => {\r\n                    reject(error)\r\n                })\r\n            })\r\n        },\r\n        [actions.RESTORE]({commit}) {\r\n            let loginUser = storage.getSessionObject(session.SESSION_USER_TAG);\r\n            if (loginUser !== null && loginUser !== '') {\r\n                console.log(loginUser)\r\n                commit(mutations.SAVE_USER_NAME, loginUser.user.userName)\r\n                commit(mutations.SAVE_NICK_NAME, loginUser.user.nickName)\r\n                commit(mutations.SAVE_TOKEN, loginUser.token)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default user"]},"metadata":{},"sourceType":"module"}