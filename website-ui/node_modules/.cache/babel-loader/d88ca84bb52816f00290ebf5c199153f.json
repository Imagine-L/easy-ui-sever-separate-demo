{"ast":null,"code":"import axios from \"axios\";\nimport store from '@/store';\nimport storage from \"@/utils/storage\"; // 创建 axios 实例\n\nconst request = axios.create({\n  // 请求url的公共部分\n  baseURL: '/admin',\n  // 超时时间\n  timeout: 1000,\n  // 设置 `content-type` ，规定前后端json格式通信\n  headers: {\n    'Content-Type': 'application/json;charset=UTF-8'\n  }\n});\nrequest.interceptors.request.use(config => {\n  if (store.state.user.token) {\n    // 如果用户含有token，则每次请求携带token\n    config.headers['Authorization'] = store.state.user.token;\n  }\n\n  return config;\n}, error => {\n  // 对请求错误做写什么\n  return Promise.reject(error);\n});\nexport default request;","map":{"version":3,"sources":["E:/学习/项目/元动力ssm小项目/website-ui/src/api/index.js"],"names":["axios","store","storage","request","create","baseURL","timeout","headers","interceptors","use","config","state","user","token","error","Promise","reject"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,OAAP,MAAoB,iBAApB,C,CAEA;;AACA,MAAMC,OAAO,GAAGH,KAAK,CAACI,MAAN,CAAa;AACzB;AACAC,EAAAA,OAAO,EAAE,QAFgB;AAGzB;AACAC,EAAAA,OAAO,EAAE,IAJgB;AAKzB;AACAC,EAAAA,OAAO,EAAE;AAAC,oBAAgB;AAAjB;AANgB,CAAb,CAAhB;AASAJ,OAAO,CAACK,YAAR,CAAqBL,OAArB,CAA6BM,GAA7B,CAAiCC,MAAM,IAAI;AACvC,MAAIT,KAAK,CAACU,KAAN,CAAYC,IAAZ,CAAiBC,KAArB,EAA4B;AACxB;AACAH,IAAAA,MAAM,CAACH,OAAP,CAAe,eAAf,IAAkCN,KAAK,CAACU,KAAN,CAAYC,IAAZ,CAAiBC,KAAnD;AACH;;AACD,SAAOH,MAAP;AACH,CAND,EAMGI,KAAK,IAAI;AACR;AACA,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CATD;AAWA,eAAeX,OAAf","sourcesContent":["import axios from \"axios\";\r\nimport store from '@/store'\r\nimport storage from \"@/utils/storage\";\r\n\r\n// 创建 axios 实例\r\nconst request = axios.create({\r\n    // 请求url的公共部分\r\n    baseURL: '/admin',\r\n    // 超时时间\r\n    timeout: 1000,\r\n    // 设置 `content-type` ，规定前后端json格式通信\r\n    headers: {'Content-Type': 'application/json;charset=UTF-8'}\r\n})\r\n\r\nrequest.interceptors.request.use(config => {\r\n    if (store.state.user.token) {\r\n        // 如果用户含有token，则每次请求携带token\r\n        config.headers['Authorization'] = store.state.user.token\r\n    }\r\n    return config\r\n}, error => {\r\n    // 对请求错误做写什么\r\n    return Promise.reject(error)\r\n})\r\n\r\nexport default request"]},"metadata":{},"sourceType":"module"}