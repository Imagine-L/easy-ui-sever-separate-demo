{"ast":null,"code":"// 导入创建路由和路由模式的方法\nimport { createRouter, createWebHistory } from \"vue-router\";\nimport { actions, route_white_list, session } from \"@/constant\";\nimport store from \"@/store\";\nimport storage from \"@/utils/storage\";\nimport { checkToken } from \"@/api/user\";\nimport { ElMessage } from \"element-plus\"; // 定义路由信息\n\nlet routes = [{\n  name: 'login',\n  path: '/login',\n  component: () => import('@/components/login')\n}, {\n  name: 'main',\n  path: '/main',\n  component: () => import('@/components/main')\n}, {\n  name: 'user',\n  path: '/user',\n  component: () => import('@/components/system/user')\n}]; // 创建路由实例并传递 `routes` 配置\n// 使用的路由模式是html5的，而不是hash，url中不含#\n\nconst router = createRouter({\n  history: createWebHistory(),\n  routes\n}); // 全局的路由守卫，可以在路由进入前做一些工作\n\nrouter.beforeEach((to, from) => {\n  // 获取目的路由名字\n  let routeName = to.name; // 是否需要放行\n\n  if (route_white_list.includes(routeName)) return true;\n  console.log(\"执行before\"); // 检查是否登录，登录则放行\n\n  console.log(store.state.user.token);\n\n  if (!store.getters.isLogin) {\n    if (storage.sessionKeyIsEmpty(session.SESSION_USER_TAG)) {\n      // 尝试从session中恢复数据\n      store.dispatch(actions.RESTORE).catch(error => {\n        store.dispatch(actions.EMPTY);\n        ElMessage.error('身份认证失效，请重新登录');\n        router.push({\n          name: 'login'\n        });\n      });\n    } else {\n      router.push({\n        name: 'login'\n      });\n      return true;\n    }\n  } // 未登录则登录\n\n\n  return true;\n}); // 导出路由实例\n\nexport default router;","map":{"version":3,"sources":["E:/学习/项目/元动力ssm小项目/website-ui/src/route/index.js"],"names":["createRouter","createWebHistory","actions","route_white_list","session","store","storage","checkToken","ElMessage","routes","name","path","component","router","history","beforeEach","to","from","routeName","includes","console","log","state","user","token","getters","isLogin","sessionKeyIsEmpty","SESSION_USER_TAG","dispatch","RESTORE","catch","error","EMPTY","push"],"mappings":"AAAA;AACA,SAAQA,YAAR,EAAsBC,gBAAtB,QAA6C,YAA7C;AACA,SAAQC,OAAR,EAAiBC,gBAAjB,EAAmCC,OAAnC,QAAiD,YAAjD;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,OAAP,MAAoB,iBAApB;AACA,SAAQC,UAAR,QAAyB,YAAzB;AACA,SAAQC,SAAR,QAAwB,cAAxB,C,CAGA;;AACA,IAAIC,MAAM,GAAG,CACT;AACIC,EAAAA,IAAI,EAAE,OADV;AAEIC,EAAAA,IAAI,EAAE,QAFV;AAGIC,EAAAA,SAAS,EAAE,MAAM,OAAO,oBAAP;AAHrB,CADS,EAMT;AACIF,EAAAA,IAAI,EAAE,MADV;AAEIC,EAAAA,IAAI,EAAE,OAFV;AAGIC,EAAAA,SAAS,EAAE,MAAM,OAAO,mBAAP;AAHrB,CANS,EAWT;AACIF,EAAAA,IAAI,EAAE,MADV;AAEIC,EAAAA,IAAI,EAAE,OAFV;AAGIC,EAAAA,SAAS,EAAE,MAAM,OAAO,0BAAP;AAHrB,CAXS,CAAb,C,CAkBA;AACA;;AACA,MAAMC,MAAM,GAAGb,YAAY,CAAC;AACxBc,EAAAA,OAAO,EAAEb,gBAAgB,EADD;AAExBQ,EAAAA;AAFwB,CAAD,CAA3B,C,CAKA;;AACAI,MAAM,CAACE,UAAP,CAAkB,CAACC,EAAD,EAAKC,IAAL,KAAc;AAC5B;AACA,MAAIC,SAAS,GAAGF,EAAE,CAACN,IAAnB,CAF4B,CAG5B;;AACA,MAAIP,gBAAgB,CAACgB,QAAjB,CAA0BD,SAA1B,CAAJ,EAA0C,OAAO,IAAP;AAE1CE,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAN4B,CAO5B;;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYhB,KAAK,CAACiB,KAAN,CAAYC,IAAZ,CAAiBC,KAA7B;;AACA,MAAI,CAACnB,KAAK,CAACoB,OAAN,CAAcC,OAAnB,EAA4B;AACxB,QAAIpB,OAAO,CAACqB,iBAAR,CAA0BvB,OAAO,CAACwB,gBAAlC,CAAJ,EAAyD;AACrD;AACAvB,MAAAA,KAAK,CAACwB,QAAN,CAAe3B,OAAO,CAAC4B,OAAvB,EAAgCC,KAAhC,CAAsCC,KAAK,IAAI;AAC3C3B,QAAAA,KAAK,CAACwB,QAAN,CAAe3B,OAAO,CAAC+B,KAAvB;AACAzB,QAAAA,SAAS,CAACwB,KAAV,CAAgB,cAAhB;AACAnB,QAAAA,MAAM,CAACqB,IAAP,CAAY;AAACxB,UAAAA,IAAI,EAAE;AAAP,SAAZ;AACH,OAJD;AAKH,KAPD,MAOO;AACHG,MAAAA,MAAM,CAACqB,IAAP,CAAY;AAACxB,QAAAA,IAAI,EAAE;AAAP,OAAZ;AACA,aAAO,IAAP;AACH;AACJ,GArB2B,CAsB5B;;;AACA,SAAO,IAAP;AACH,CAxBD,E,CA0BA;;AACA,eAAeG,MAAf","sourcesContent":["// 导入创建路由和路由模式的方法\r\nimport {createRouter, createWebHistory} from \"vue-router\";\r\nimport {actions, route_white_list, session} from \"@/constant\";\r\nimport store from \"@/store\";\r\nimport storage from \"@/utils/storage\";\r\nimport {checkToken} from \"@/api/user\";\r\nimport {ElMessage} from \"element-plus\";\r\n\r\n\r\n// 定义路由信息\r\nlet routes = [\r\n    {\r\n        name: 'login',\r\n        path: '/login',\r\n        component: () => import('@/components/login')\r\n    },\r\n    {\r\n        name: 'main',\r\n        path: '/main',\r\n        component: () => import('@/components/main')\r\n    },\r\n    {\r\n        name: 'user',\r\n        path: '/user',\r\n        component: () => import('@/components/system/user')\r\n    }\r\n]\r\n\r\n// 创建路由实例并传递 `routes` 配置\r\n// 使用的路由模式是html5的，而不是hash，url中不含#\r\nconst router = createRouter({\r\n    history: createWebHistory(),\r\n    routes\r\n})\r\n\r\n// 全局的路由守卫，可以在路由进入前做一些工作\r\nrouter.beforeEach((to, from) => {\r\n    // 获取目的路由名字\r\n    let routeName = to.name\r\n    // 是否需要放行\r\n    if (route_white_list.includes(routeName)) return true\r\n\r\n    console.log(\"执行before\")\r\n    // 检查是否登录，登录则放行\r\n    console.log(store.state.user.token)\r\n    if (!store.getters.isLogin) {\r\n        if (storage.sessionKeyIsEmpty(session.SESSION_USER_TAG)) {\r\n            // 尝试从session中恢复数据\r\n            store.dispatch(actions.RESTORE).catch(error => {\r\n                store.dispatch(actions.EMPTY)\r\n                ElMessage.error('身份认证失效，请重新登录')\r\n                router.push({name: 'login'})\r\n            })\r\n        } else {\r\n            router.push({name: 'login'})\r\n            return true\r\n        }\r\n    }\r\n    // 未登录则登录\r\n    return true\r\n})\r\n\r\n// 导出路由实例\r\nexport default router"]},"metadata":{},"sourceType":"module"}